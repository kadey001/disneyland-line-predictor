services:
  # Next.js Frontend Application
  app:
    build: .
    environment:
      DATABASE_URL: ${DATABASE_URL}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      NEXTAUTH_URL: ${NEXTAUTH_URL}
      # Enable hot reloading
      WATCHPACK_POLLING: "true"
      CHOKIDAR_USEPOLLING: "true"
    ports:
      - "3000:3000"
    networks:
      - disneyland-network
    volumes:
      # Mount source code for hot reloading
      - .:/app
      # Exclude node_modules to avoid conflicts
      - /app/node_modules
      # Exclude .next to avoid conflicts
      - /app/.next
    command: ["npm", "run", "dev"]

  # Go Wait Times API Microservice
  wait-times-api:
    build: ./go-services/wait-times-api
    environment:
      DATABASE_URL: ${DATABASE_URL}
      GO_DATABASE_URL: ${GO_DATABASE_URL}
      PORT: 8080
    ports:
      - "8080:8080"
    networks:
      - disneyland-network

  # Go Live Data Collector Microservice
  live-data-collector:
    build: ./go-services/live-data-collector-service
    environment:
      DATABASE_URL: ${DATABASE_URL}
      GO_DATABASE_URL: ${GO_DATABASE_URL}
      PORT: 8081
    ports:
      - "8081:8081"
    networks:
      - disneyland-network

  # Prisma Studio for Database Management
  prisma-studio:
    build: .
    environment:
      DATABASE_URL: ${DATABASE_URL}
    ports:
      - "5555:5555"
    networks:
      - disneyland-network
    volumes:
      # Mount prisma directory for schema hot reloading
      - ./prisma:/app/prisma
      - /app/node_modules
    command: ["npx", "prisma", "studio", "--port", "5555", "--hostname", "0.0.0.0"]

networks:
  disneyland-network:
    driver: bridge
