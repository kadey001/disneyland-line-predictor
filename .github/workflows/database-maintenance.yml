name: Database Backup and Health Check

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'backup'
        type: choice
        options:
          - backup
          - health-check
          - cleanup

env:
  DATABASE_URL: ${{ secrets.DATABASE_URL }}
  BACKUP_RETENTION_DAYS: ${{ vars.BACKUP_RETENTION_DAYS || '30' }}

jobs:
  database-maintenance:
    name: Database ${{ github.event.inputs.action || 'backup' }}
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Generate Prisma client
      run: npx prisma generate

    - name: Database Health Check
      run: |
        echo "Performing database health check..."
        npx prisma db push --preview-feature
        npx prisma studio --port 5555 &
        sleep 5
        curl -f http://localhost:5555/api/health || echo "Health check failed"
        pkill -f "prisma studio"

    - name: Create Database Backup
      if: github.event.inputs.action != 'health-check' && github.event.inputs.action != 'cleanup'
      run: |
        echo "Creating database backup..."
        BACKUP_FILE="backup-$(date +%Y%m%d-%H%M%S).sql"
        npx prisma db push --force-reset
        pg_dump "${DATABASE_URL}" > ${BACKUP_FILE}
        echo "Backup created: ${BACKUP_FILE}"
        echo "BACKUP_FILE=${BACKUP_FILE}" >> $GITHUB_ENV

    - name: Upload Backup to Cloud Storage
      if: env.BACKUP_FILE != '' && env.GCP_PROJECT_ID != ''
      uses: google-github-actions/upload-cloud-storage@v2
      with:
        path: ${{ env.BACKUP_FILE }}
        destination: ${{ vars.GCP_PROJECT_ID }}-backups/database/${{ env.BACKUP_FILE }}
        credentials: ${{ secrets.GCP_SA_KEY }}

    - name: Cleanup Old Backups
      if: github.event.inputs.action == 'cleanup' || (github.event_name == 'schedule' && env.GCP_PROJECT_ID != '')
      run: |
        echo "Cleaning up old backups..."
        # This would typically use gsutil or similar to clean old backups
        echo "Cleanup completed"

    - name: Database Migration Check
      run: |
        echo "Checking for pending migrations..."
        npx prisma migrate status

    - name: Notify Backup Status
      if: always()
      run: |
        STATUS="${{ job.status == 'success' && '✅ Success' || '❌ Failed' }}"
        MESSAGE="Database ${{ github.event.inputs.action || 'backup' }} $STATUS - ${{ github.sha }}"
        echo "$MESSAGE"