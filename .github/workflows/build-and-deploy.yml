name: Build and Deploy with Terraform

on:
  push:
    branches: [ master, main ]
    paths:
      - 'go-services/**'
      - 'terraform/**'
      - '.github/workflows/build-and-deploy.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - production
      skip_build:
        description: 'Skip Docker build step'
        required: false
        default: false
        type: boolean

env:
  GCP_PROJECT_ID: ${{ vars.GCP_PROJECT_ID }}
  GCP_REGION: ${{ vars.GCP_REGION || 'us-west2' }}
  ARTIFACT_REGISTRY_REPO: ${{ vars.ARTIFACT_REGISTRY_REPO || 'wait-times-repo' }}
  TF_VERSION: '1.5.0'

jobs:
  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    if: github.event.inputs.skip_build != 'true'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Configure Docker
      run: gcloud auth configure-docker ${{ env.GCP_REGION }}-docker.pkg.dev

    - name: Build and push Wait Times API
      working-directory: ./go-services
      run: |
        echo "Building Wait Times API with tag: ${{ github.sha }}"
        docker build -f wait-times-api/Dockerfile \
          -t ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY_REPO }}/wait-times-api:${{ github.sha }} \
          wait-times-api/
        docker push ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY_REPO }}/wait-times-api:${{ github.sha }}

    - name: Build and push Live Data Collector
      working-directory: ./go-services
      run: |
        echo "Building Live Data Collector with tag: ${{ github.sha }}"
        docker build -f live-data-collector-service/Dockerfile \
          -t ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY_REPO }}/live-data-collector-service:${{ github.sha }} \
          live-data-collector-service/
        docker push ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY_REPO }}/live-data-collector-service:${{ github.sha }}

  terraform-deploy:
    name: Deploy with Terraform
    runs-on: ubuntu-latest
    needs: build-and-push
    if: always() && (needs.build-and-push.result == 'success' || github.event.inputs.skip_build == 'true')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Terraform Init
      working-directory: ./terraform
      run: terraform init

    - name: Terraform Format
      working-directory: ./terraform
      run: terraform fmt -check

    - name: Terraform Validate
      working-directory: ./terraform
      run: terraform validate

    - name: Terraform Plan
      working-directory: ./terraform
      run: |
        terraform plan -out=tfplan
        terraform show -no-color tfplan

    - name: Terraform Apply
      working-directory: ./terraform
      run: terraform apply -auto-approve tfplan

    - name: Generate deployment summary
      working-directory: ./terraform
      run: |
        echo "# Deployment Summary" > ../DEPLOYMENT.md
        echo "" >> ../DEPLOYMENT.md
        echo "## Last Deployed: $(date)" >> ../DEPLOYMENT.md
        echo "- Commit: ${{ github.sha }}" >> ../DEPLOYMENT.md
        echo "- Environment: ${{ github.event.inputs.environment || 'development' }}" >> ../DEPLOYMENT.md
        echo "- Actor: ${{ github.actor }}" >> ../DEPLOYMENT.md
        echo "" >> ../DEPLOYMENT.md
        echo "## Service URLs" >> ../DEPLOYMENT.md
        terraform output -json | jq -r 'to_entries[] | "- \(.key): \(.value.value)"' >> ../DEPLOYMENT.md 2>/dev/null || echo "- Outputs not available" >> ../DEPLOYMENT.md

  notify:
    name: Notify Deployment
    needs: [build-and-push, terraform-deploy]
    runs-on: ubuntu-latest
    if: always()

    steps:
    - name: Notify deployment status
      run: |
        echo "ðŸš€ Deployment ${{ needs.terraform-deploy.result == 'success' && 'completed successfully' || 'failed' }}"
        echo "ðŸ“‹ Environment: ${{ github.event.inputs.environment || 'development' }}"
        echo "ðŸ”— Commit: ${{ github.sha }}"
        echo "ðŸ‘¤ Actor: ${{ github.actor }}"
        echo "ðŸ“¦ Images built with SHA: ${{ github.sha }}"
