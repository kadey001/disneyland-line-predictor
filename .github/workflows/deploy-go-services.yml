name: Deploy Go Services

on:
  push:
    branches: [ master, main ]
    paths:
      - 'go-services/**'
      - '.github/workflows/deploy-go-services.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  GCP_PROJECT_ID: ${{ vars.GCP_PROJECT_ID }}
  GCP_REGION: ${{ vars.GCP_REGION || 'us-west2' }}
  ARTIFACT_REGISTRY_REPO: ${{ vars.ARTIFACT_REGISTRY_REPO || 'wait-times-repo' }}

jobs:
  deploy-wait-times-api:
    name: Deploy Wait Times API
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Configure Docker
      run: gcloud auth configure-docker ${{ env.GCP_REGION }}-docker.pkg.dev

    - name: Build and push Wait Times API
      working-directory: ./go-services/wait-times-api
      run: |
        docker build -t ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY_REPO }}/wait-times-api:latest .
        docker push ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY_REPO }}/wait-times-api:latest

    - name: Deploy to Cloud Run
      run: |
        gcloud run deploy wait-times-api \
          --image ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY_REPO }}/wait-times-api:latest \
          --platform managed \
          --region ${{ env.GCP_REGION }} \
          --allow-unauthenticated \
          --port 8080 \
          --memory 512Mi \
          --cpu 1 \
          --concurrency 80 \
          --timeout 300 \
          --set-env-vars DATABASE_URL=${{ secrets.DATABASE_URL }} \
          --set-env-vars ENV=production

  deploy-live-data-collector:
    name: Deploy Live Data Collector
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Configure Docker
      run: gcloud auth configure-docker ${{ env.GCP_REGION }}-docker.pkg.dev

    - name: Build and push Live Data Collector
      working-directory: ./go-services/live-data-collector-service
      run: |
        docker build -t ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY_REPO }}/live-data-collector:latest .
        docker push ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY_REPO }}/live-data-collector:latest

    - name: Deploy to Cloud Run
      run: |
        gcloud run deploy live-data-collector \
          --image ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY_REPO }}/live-data-collector:latest \
          --platform managed \
          --region ${{ env.GCP_REGION }} \
          --allow-unauthenticated \
          --port 8081 \
          --memory 512Mi \
          --cpu 1 \
          --concurrency 80 \
          --timeout 300 \
          --set-env-vars DATABASE_URL=${{ secrets.DATABASE_URL }} \
          --set-env-vars ENV=production

  notify:
    name: Notify Deployment
    needs: [deploy-wait-times-api, deploy-live-data-collector]
    runs-on: ubuntu-latest
    if: always()

    steps:
    - name: Notify Slack (if configured)
      if: env.SLACK_WEBHOOK != ''
      run: |
        curl -X POST -H 'Content-type: application/json' \
        --data '{"text":"Go Services Deployment ${{ job.status == '\''success'\'' && '\''Completed'\'' || '\''Failed'\'' }} - ${{ github.sha }}"}' \
        ${{ secrets.SLACK_WEBHOOK }}
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
